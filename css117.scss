// ======================================== //
//  THE GRID
// ======================================== //


// Instructions
// ----------------------------------------
//
// In your SASS project partials (usually named variables.scss) :
//
// - Copy and paste the following map : $css117-breakpoints
// - Copy and paste the following variables : $css117-space & $css117-variables
// - Remove the !default flag on each.
// - Change variables has you need (more info https://css117.io)
// ----------------------------------------

// DRY variables
$css117-space: 30px !default;
$css117-col:   'col' !default;


// Map (breakpoints)
// ----------------------------------------
// 1. Keep the order from largest to smallest breakpoint
// 2. Media Queries are based on max-width (no min-width)
//    Mobile First is great for conception but useless for CSS
// 3. Value be in pixels (They will be converted below as REM (cf.@function rem))

$css117-bkpts: 800, 500 !default;


// Grid variables
// ----------------------------------------

$css117-variables: (

  // Classes name
  // -----------------------------------
  grid-class-name:      $css117-col+'s',  // cols
  col-class-name:       $css117-col,      // col

  // Breakpoints
  // -----------------------------------
  largest-breakpoint:   $css117-col+'--up', // col--up
  full-width-on-smallest: true,
  
  // Grid dimensions
  // -----------------------------------
  max-width:            1200px,
  gutter-width:   $css117-space,
  gutter-height:  $css117-space,


  // Columns settings
  // -----------------------------------
  
  // Number of columns
  nb-of-columns:        12,
  columns-start-from:   1,
  choose-columns:       false,
  which-columns:        (4,5,6,7,8,12),
  

  // Margins and paddings
  // -----------------------------------
  grid-margin-top:    $css117-space,
  grid-margin-bottom: $css117-space,
  grid-margin-left:   $css117-space,
  grid-margin-right:  $css117-space,
  
  col-padding:        $css117-space,


  // Add a wrapper ?
  // -----------------------------------
  wrapper:              true,
  wrapper-class-name:   $css117-col+'s-wrapper', // -> cols--wrapper


  // Legacy Browser Support
  // -----------------------------------
  old-browser-support:  true,
  class-prefixed:       true,


  // Alignement of the grid
  // -----------------------------------
  grid-centered:        false,

  
  // Visibility Classes ?
  // -----------------------------------
  visibility-class:     true,
  
  // Production mode ?
  // -----------------------------------
  dev:                  false,
  debug:                false
) !default;











// ========================================================================================================================================
// ========================================================================================================================================
// /!\ Do not modify from here
// ========================================================================================================================================
// ========================================================================================================================================


// ====================================================================
// BKPT - Create reusable variables over breakpoints
// ex: bkpt('col--800') -> 800px
// ====================================================================

// Create an empy map
$css117-breakpoints: ();

// Push inside the map the value from $css117-bkpts
@each $css117-bkpt in $css117-bkpts {
  $css117-breakpoints: map-merge($css117-breakpoints, ($css117-col+'--'+$css117-bkpt: $css117-bkpt * 1px));
}


// ====================================================================
// FUNCTIONS
// ====================================================================

$em-base: 16 !default;

// Strips the unit from a number.
// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/functions/_strip-units.scss
@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}


// Convert pixels to rems
// eg. for a relational value of 12px write rem(12)
// Assumes $em-base is the font-size of <html>
// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/functions/_px-to-rem.scss
@function rem($pxval) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }

  @if not unitless($em-base) {
    $em-base: strip-units($em-base);
  }
  @return ($pxval / $em-base) * 1rem;
}


// ====================================================================
// MEDIA QUERIES
// ====================================================================

@mixin mq-grid($css117-query) {
  @each $css117-breakpoint-name, $css117-size in $css117-breakpoints {
    @if $css117-query == $css117-size {
      @if (unitless($css117-size)) or (unit($css117-size) == 'px') {
        @media (max-width: rem($css117-size)) { @content; }
      } @else if (unit($css117-size) == 'em') or (unit($css117-size) == 'rem') {
        @media (max-width: $css117-size) { @content; }
      }
    }
  }
}

// ====================================================================
// GRID
// ====================================================================

// Core variables
// -----------------------------------

// Set gutter and margins in percentage

$css117-max-width-unit-less: strip-units(map-get($css117-settings, max-width)); // max-width without unit
$css117-gutter-unit-less:   strip-units(map-get($css117-settings, gutter-width)); // gutter without unit
$css117-gutter-perc:     $css117-gutter-unit-less / $css117-max-width-unit-less * 100%;
$css117-total-width:     $css117-max-width-unit-less + $css117-gutter-unit-less;
$css117-margin-left-col:    $css117-gutter-unit-less / $css117-total-width * 100%;


// Debug
// -----------------------------------

@if map-get($css117-settings, debug) {
  @debug '\a\aGRID SETTINGS:\a- width: #{map-get($css117-settings, max-width)}\a- gutter-width: #{map-get($css117-settings, gutter-width)}\a- grid-padding: #{map-get($css117-settings, grid-padding)}\a- col-padding: #{map-get($css117-settings, col-padding)}\a- nb-of-columns: #{map-get($css117-settings, nb-of-columns)}\a';
}

// Create two classes : .cols & .col
// -----------------------------------

// .GRID
.#{map-get($css117-settings, grid-class-name)} {
  max-width: map-get($css117-settings, max-width);
  box-sizing: border-box;

  margin-top: map-get($css117-settings, grid-margin-top);
  margin-bottom: map-get($css117-settings, grid-margin-bottom);

  padding: map-get($css117-settings, grid-padding);

  @if map-get($css117-settings, centered) {
    margin-right: auto;
    margin-left: auto;
  }

  // if dev: true
  @if map-get($css117-settings, dev) { transition: 250ms cubic-bezier(0.42, 0, 0.58, 1); }
}

// .COLS
.#{map-get($css117-settings, cols-class-name)} { 
  display: flex;
  flex-wrap: wrap;
  margin-left: $css117-gutter-perc * -1; 

  @if map-get($css117-settings, nested) {
    & & { 
      margin: map-get($css117-settings, col-padding) * -1 map-get($css117-settings, col-padding) * -1 map-get($css117-settings, col-padding) * -2; 
      padding: map-get($css117-settings, nested-cols-padding);
    }
  }
}

// .COL
.#{map-get($css117-settings, col-class-name)} {
  box-sizing: border-box;
  margin-top: map-get($css117-settings, col-margin-top);
  margin-bottom: map-get($css117-settings, col-margin-bottom);
  margin-left: $css117-gutter-unit-less / $css117-total-width * 100%;

  padding: map-get($css117-settings, col-padding);

  &.last { display: block; }

  img { max-width: 100%; }

  // if dev: true
  @if map-get($css117-settings, dev) {
    $dev-color-1: rgba(0, 0, 255, 0.8);
    $dev-color-2: rgba(255, 0, 0, 0.1);
    transition: 250ms cubic-bezier(0.42, 0, 0.58, 1);
    border-left: 1px $dev-color-1 solid !important;
    border-right: 1px $dev-color-1 solid !important;
    background-color: $dev-color-2 !important;
  }
}



// GRID-WRAPPER
// ====================================================================
@if map-get($css117-variables, wrapper) {
  .#{map-get($css117-variables, wrapper-class-name)} {
    background-color: #ccc; // to be override

    // Keep a consistency for vertical gutters
    padding: 0 0 1px;
    & + .#{map-get($css117-variables, grid-class-name)} { margin-top: 0 }

    @supports (display: grid) {
      margin: $css117-space 0;
      padding: 1px 0;
    }
  }
}



// FUNCTION : MQ-LOOP / Calculate the width of a column in percentage
// ====================================================================
@function mq-loop($css117-i) {
  @return (($css117-i / map-get($css117-variables, nb-of-columns)) * 100% );
}



// MIXIN : COLUMNS-MATH / Calculate the width and margin-left of each columns
// ====================================================================

@mixin columns-math($css117-i, $css117-breakpoint-name) {

// Generate a width for each columns
.#{$css117-breakpoint-name}-#{$css117-i} {
    @if map-get($css117-variables, old-browser-support) {
      width: mq-loop($css117-i);
      width: calc(#{mq-loop($css117-i)} - #{map-get($css117-variables, gutter-width)});
    }
    @if map-get($css117-variables, class-prefixed) {
      -ms-grid-column-span: #{$css117-i};
      -ms-grid-column: auto;
    }
    grid-column: auto / span #{$css117-i};
  }
}




// MIXIN : GRID-MATH / Apply mq-loop to each column size from 1 to map-get($css117-variables, nb-of-columns)
// ====================================================================
@mixin grid-math($css117-breakpoint-name) {

  // If full-width-on-smallest = true
  @if $css117-breakpoint-name == nth(map-keys($css117-breakpoints), -1) and map-get($css117-variables, full-width-on-smallest) {

    .#{map-get($css117-variables, grid-class-name)} { 
      grid-column-gap: 0;
      column-gap: 0;
    }

    .#{map-get($css117-variables, col-class-name)} { grid-column: start / end; }

  } @else {

    // If choose-columns = true
    @if map-get($css117-variables, choose-columns) {
      @each $css117-i in map-get($css117-variables, which-columns) {
        @include columns-math($css117-i, $css117-breakpoint-name);
      }
    } @else {
      @for $css117-i from map-get($css117-variables, columns-start-from) to (map-get($css117-variables, nb-of-columns) + 1 ) {
        @include columns-math($css117-i, $css117-breakpoint-name);
      }
    }
  }

  // Some helpers
  @if map-get($css117-variables, visibility-class) {
    .#{$css117-breakpoint-name}-hidden  { display: none; }
    .#{$css117-breakpoint-name}-visible { display: block; }
  }
}



// INCLUDE : GRID-MATH / Display sizes for each breakpoint
// ====================================================================

// 01. Display general values; by default 'large'
@include grid-math(map-get($css117-variables, largest-breakpoint));

// 02. Display values for each breakpoints
@each $css117-breakpoint-name, $css117-size in $css117-breakpoints {
  @include mq-grid($css117-size) {
    @include grid-math($css117-breakpoint-name);
  }
}
