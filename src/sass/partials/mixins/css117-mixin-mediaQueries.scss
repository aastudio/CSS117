//------------------------------------
//  #MEDIA QUERIES MIXIN
//------------------------------------


// Variables
// ----------------------------------------

$css117-mediaqueries: (
    mobile-first: false,
) !default;


// 01. Are you mobile first ?
    // Add this variable in partials/_variables.scss to modify it

// 02. If mobile first, inverse the order of breakpoints below
// Units : You can use either 'rem', 'em' and 'px'

$css117-breakpoints: null;

@if global_variable_exists(breakpoints) {
    $css117-breakpoints: $breakpoints

} @else {
    $css117-breakpoints: (
        medium:     800px,
        small:      500px,
    ) !default;

}

// @debug map-get($css117-breakpoints, small);

// 03. If mobile first, the first class is named, by default, 'small' and 'large' if not. To modify it, change the variable $css117-globalBkpt
@if map-get($css117-mediaqueries, mobile-first) { $css117-globalBkpt: 'small' !default !global; }
            @else { $css117-globalBkpt: 'large' !default !global; }



// ====================================================================//
// Do not modify from here
// ====================================================================//


// Units functions
// ----------------------------------------

$em-base: 16 !default;

// Strips the unit from a number.
// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/functions/_strip-units.scss
@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}


// Convert pixels to rems
// eg. for a relational value of 12px write rem(12)
// Assumes $em-base is the font-size of <html>
// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/functions/_px-to-rem.scss
@function rem($pxval) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }

  $base: $em-base;
  @if not unitless($base) {
    $base: strip-units($base);
  }
  @return ($pxval / $base) * 1rem;
}


// Media query from a defined named width
// ----------------------------------------
// ex: .foo { @include mq(medium) {...} }
// ex: .foo { @include mq(320) {...} }
// ex: .foo { @include mq(50rem) {...} }
// ex: .foo { @include mq(45em) {...} }
// ex: .foo { @include mq(320px) {...} }

@mixin mq($media-query){

    @if map-get($css117-mediaqueries, mobile-first) {
        $query: 'min-width' !global;
    } @else {
        $query: 'max-width' !global;
    }

    @if type-of($media-query) == string {

        @if map-has-key($css117-breakpoints, $media-query) {
            @each $css117-breakpoints, $size in $css117-breakpoints {
                @if $media-query == $css117-breakpoints {

                    @if (unitless($size)) or (unit($size) == 'px') {
                        @media ($query: rem($size)) { @content; }
                    }
                    @else if (unit($size) == 'em') or (unit($size) == 'rem') {
                        @media ($query: $size) { @content; }
                    }
                }
            }
        }
        @else { @error("\a '#{$media-query}' does not exist in your map $css117-breakpoints.\a"); }
    }

    @else if type-of($media-query) == number {

        @if not unitless($media-query) {
            @if
                unit($media-query) != 'px' and unit($media-query) != 'rem' and unit($media-query) != 'em'
                { @error "\a '#{unit($media-query)}' is not a valid unit for the mq mixin (_mixins.scss). \a You can use only pixel, rem or em.\a" };
        }

        @if (unit($media-query) == 'px') or unitless($media-query) {
            @media ($query: rem($media-query) ) { @content; }
        }
        @else if (unit($media-query) == 'em') or (unit($media-query) == 'rem'){
            @media ($query: $media-query) { @content; }
        }
    }
}
