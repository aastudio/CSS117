//------------------------------------
//  THE GRID
//------------------------------------

// /!\ Dependencies
// ----------------------------------------

// @import '../mixins/mq';


// Help
// ----------------------------------------

// Floats or Inline-block ?
	// 'inline-block' or 'float'
// Centered grid ?
	// Simulate a margin-left and margin-right : auto
// Are you in development mode ?
	// Add a background-color behind elements
	// Print variables value in the console
// Do you want a unique full width for the 'small' breakpoint (see mq.scss for breakpoints) ?
// Do you need offset classes ?
// Do you need hidden/visible classes ?
// Customize your class name (only if you think it is necessary)


// Variables
// ----------------------------------------

// Are you mobile first ? See mixins/mq.scss and change the variable $mobile-first

// Grid dimensions
$css117-grid: (
	nb-of-columns:	 12,

	width:			 1000px,
	gutter-width:	 20px,

	rowPadding: 	 10px,
	colPadding:		 50px,

	rowMarginBottom: 30px,
	colMarginBottom: 30px,

	positionScheme:  'inline-block',

	row: 			 'cols',
	col: 		 	 'col',
	offsetClass:	 'offset',

	centered: 		 false,
	small: 			 false,
	offset: 		 false,
	visibility: 	 false,

	dev: 			 false,
	debug: 			 false
) !default;




// ====================================================================//
// /!\ Do not modify from here
// ====================================================================//


// Core variables
// -----------------------------------

// Get the nb of columns from the map (default 12)
$css117-colNb:			map-get($css117-grid, nb-of-columns);
// Convert the gutter-width from the map in percentage
$css117-gutterPerc: 	strip-units( map-get($css117-grid, gutter-width) ) / strip-units( map-get($css117-grid, width) ) * 100%;
// Calculate the max-width= width + $css117-gutterPerc. Result is in pixels
$css117-grid-max-width: map-get($css117-grid, width) * ( 1 + ( $css117-gutterPerc / 100% ) );
// Calculate the $css117-gutterPerc based on max-width
$css117-grid-marginLeft:map-get($css117-grid, gutter-width) / $css117-grid-max-width * 100%;


// Helpers
// -----------------------------------

%css117-cf {
	&::before,
	&::after {
    	content: "";
    	display: table;
    }
    &::after { clear: both; }
}


// Create two classes : .row & .col
// -----------------------------------

// Wrap the grid
.#{map-get($css117-grid, row)} {
	max-width: $css117-grid-max-width;
	box-sizing: border-box;

	margin-top: 0;
	margin-bottom: map-get($css117-grid, rowMarginBottom);

	padding: map-get($css117-grid, rowPadding);

	@if map-get($css117-grid, centered) {
		margin-right: auto;
		margin-left: calc(50vw - ( #{map-get($css117-grid, width)} * 0.5 ) - ( #{map-get($css117-grid, width)} * ( #{ strip-units($css117-gutterPerc) } / 100 ) ) );
	}

	@media( max-width: map-get($css117-grid, width) ){ margin-left: -$css117-gutterPerc; }

	@if map-get($css117-grid, positionScheme) == 'inline-block' 	{ font-size: 0; }
	@else if map-get($css117-grid, positionScheme) == 'float' 	{ @extend %css117-cf; }

	@if map-get($css117-grid, dev) {
		/* for development mode only */
		transition: 250ms cubic-bezier(0.42,0,0.58,1);
		background-color: rgba(255,0,0,0.1) !important;
	}
}

	.#{map-get($css117-grid, col)} {
		box-sizing: border-box;

		margin-top: 0;
		margin-bottom: map-get($css117-grid, colMarginBottom);
		margin-left: $css117-grid-marginLeft;

		padding: map-get($css117-grid, colPadding);

		img { max-width: 100%; }

		@if map-get($css117-grid, positionScheme) == 'inline-block' {
			display: inline-block;
			vertical-align: top;
			font-size: 1rem;
		}
		@else if map-get($css117-grid, positionScheme) == 'float' { float: left; }

		@if map-get($css117-grid, dev) {
			/* for development mode only */
			transition: 250ms cubic-bezier(0.42,0,0.58,1);
			border-left: 1px rgba(0,0,255,0.8) solid !important;
			border-right: 1px rgba(0,0,255,0.8) solid !important;
			background-color: rgba(255,0,0,0.1) !important;
			@at-root body { background-color: rgba(255,0,0,0.2) !important; }
		}
	}



// Function that will loop $css117-colNb times
// -----------------------------------

// Calculate the width of a column in percentage
@function mq-loop($css117-gutterPerc, $i, $css117-colNb){
	@return ( (($i/$css117-colNb)*100%) - $css117-grid-marginLeft );
}

// Apply mq-loop to each column size from 1 to $css117-colNb (default: 12)
@mixin grid-math($css117-colNb,$css117-breakpoint,$css117-gutterPerc) {

	@if $css117-breakpoint == 'small' and map-get($css117-grid, small) {
		.col { width: mq-loop($css117-gutterPerc, $css117-colNb, $css117-colNb); }
	}

	@else {
		@for $i from 1 to ($css117-colNb) {
			.#{$css117-breakpoint}-#{$i} { width: mq-loop($css117-gutterPerc, $i, $css117-colNb); }
		}
		.#{$css117-breakpoint}-#{$css117-colNb} { width: mq-loop($css117-gutterPerc, $css117-colNb, $css117-colNb); }
	}


	// Create offset classes
	@if map-get($css117-grid, offset) {
		@for $i from 1 to ($css117-colNb) {
			.#{$css117-breakpoint}-#{map-get($css117-grid, offsetClass)}-#{$i} { margin-left: mq-loop($css117-gutterPerc, $i, $css117-colNb) + 2 * $css117-grid-marginLeft; }
		}
		.#{$css117-breakpoint}-no-#{map-get($css117-grid, offsetClass)} { margin-left: $css117-grid-marginLeft; }
	}


	// Some helpers
	@if map-get($css117-grid, visibility) {
		.#{$css117-breakpoint}-hidden  { display: none; }
		.#{$css117-breakpoint}-visible { display: initial; }
	}
}




// Display sizes for each breakpoint
// -------------------------------------

// 01. Display general values ; by default 'large' if $mobile-first: false (see mixins/mq.scss)
@include grid-math($css117-colNb, $css117-globalBkpt ,$css117-gutterPerc);

// 02. Display values for each breakpoints
@each $css117-breakpoint, $value in $css117-breakpoints {
	@include mq($value) {
		@include grid-math($css117-colNb,$css117-breakpoint,$css117-gutterPerc);
	}
}




// Debug
// -----------------------------------

@if map-get($css117-grid, debug) {
	@debug "\a\aGrid:\a- width: #{map-get($css117-grid, width)}\a- gutter-width: #{map-get($css117-grid, gutter-width)}\a- rowPadding: #{map-get($css117-grid, rowPadding)}\a- colPadding: #{map-get($css117-grid, colPadding)}\a- nb-of-columns: #{map-get($css117-grid, nb-of-columns)}\a\a- positionScheme: #{map-get($css117-grid, positionScheme)}\a- centered: #{map-get($css117-grid, centered)}\a- small: #{map-get($css117-grid, small)}\a- offset: #{map-get($css117-grid, offset)}\a- visibility: #{map-get($css117-grid, visibility)}\a\a- $css117-gutterPerc: #{$css117-gutterPerc}\a- $css117-grid-max-width: #{$css117-grid-max-width}\a- $css117-grid-marginLeft: #{$css117-grid-marginLeft}\a\a- dev: #{map-get($css117-grid, dev)}\a- debug: #{map-get($css117-grid, debug)}\a";
}


