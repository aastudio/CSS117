//------------------------------------
//  THE GRID						  
//------------------------------------

// /!\ Dependencies
// ----------------------------------------
// @import '../mixins/baseline';
// @import '../mixins/mq';
// @import '../utils/helpers'; // if $positionScheme: 'float'



// Variables
// ----------------------------------------

// Are you mobile first ? See mixins/mq.scss and change the variable $mobile-first

// Grid dimensions
$grid: (
	width:			1000px,
	gutter-width:	20px,
	rowPadding: 	10px,
	colPadding:		50px,
	nb-of-columns:	12,
) !default;

// Floats or Inline-block ?
$positionScheme: 'inline-block'; // 'float'

// Centered grid ?
$centered: false !default; // Add a background-color behind elements

// Are you in development mode ?
$dev: 	false !default; // Add a background-color behind elements
$debug: false !default; // Print variables value in the console

// Do you want a unique full width for the 'small' breakpoint (see mq.scss for breakpoints) ?
$small: false !default;

// Do you need offset classes ?
$offset: false !default;

// Do you need hidden/visible classes ?
$visibility: false !default;

// Customize your class name (only if you think it is necessary)
$row: 			'row' 		!default;
$col: 		 	'col' 		!default;
$offsetClass:	'offset' 	!default;






// ====================================================================//
// /!\ Do not modify from here
// ====================================================================//

// Core variables
// -----------------------------------

// Get the nb of columns from the map (default 12)
$colNb:			map-get($grid, nb-of-columns);
// Convert the gutter-width from the map in percentage
$gutterPerc: 	strip-units( map-get($grid, gutter-width) ) / strip-units( map-get($grid, width) ) * 100%;
// Calculate the max-width= width + $gutterPerc. Result is in pixels
$max-width: 	map-get($grid, width) * ( 1 + ( $gutterPerc / 100% ) );
// Calculate the $gutterPerc based on max-width
$marginLeft:	map-get($grid, gutter-width) / $max-width * 100%;




// Create two classes : .row & .col
// -----------------------------------

// Wrap the grid
.#{$row} {
	max-width: $max-width;
	box-sizing: border-box;
	padding: map-get($grid, rowPadding);

	@include baseline(1); // cf. _mixins.scss

	@if $centered {
		margin-right: auto;
		margin-left: calc(50vw - ( #{map-get($grid, width)} * 0.5 ) - ( #{map-get($grid, width)} * ( #{ strip-units($gutterPerc) } / 100 ) ) );
	}

	@media( max-width: map-get($grid, width) ){ margin-left: -$gutterPerc; }
	
	@if $positionScheme == 'inline-block' 	{ font-size: 0; }
	@else if $positionScheme == 'float' 	{ @extend %cf; }

	@if $dev {
		/* for development mode only */
		transition: 250ms cubic-bezier(0.42,0,0.58,1);
		background-color: rgba(255,0,0,0.1) !important;
	}
}

	.#{$col} {
		box-sizing: border-box;
		margin-left: $marginLeft;
		padding: map-get($grid, colPadding);

		img { max-width: 100%; }

		@include baseline(1); // cf. _mixins.scss

		@if $positionScheme == 'inline-block' { 
			display: inline-block;
			vertical-align: top; 
			font-size: 1rem; 
		}
		@else if $positionScheme == 'float' { float: left; }
		
		@if $dev {
			/* for development mode only */
			transition: 250ms cubic-bezier(0.42,0,0.58,1);
			border-left: 1px rgba(0,0,255,0.8) solid !important;
			border-right: 1px rgba(0,0,255,0.8) solid !important;
			background-color: rgba(255,0,0,0.1) !important;
			@at-root body { background-color: rgba(255,0,0,0.2) !important; }
		}
	}



// Function that will loop $colNb times
// -----------------------------------

// Calculate the width of a column in percentage
@function mq-loop($gutterPerc, $i, $colNb){
	@return ( (($i/$colNb)*100%) - $marginLeft );
}

// Apply mq-loop to each column size from 1 to $colNb (default: 12)
@mixin grid-math($colNb,$breakpoint,$gutterPerc) {
	
	@if $breakpoint == 'small' and $small {
		.col { width: mq-loop($gutterPerc, $colNb, $colNb); }
	}

	@else {
		@for $i from 1 to ($colNb) { 
			.#{$breakpoint}-#{$i} { width: mq-loop($gutterPerc, $i, $colNb); }
		}
		.#{$breakpoint}-#{$colNb} { width: mq-loop($gutterPerc, $colNb, $colNb); }
	}


	// Create offset classes
	@if $offset {
		@for $i from 1 to ($colNb) { 
			.#{$breakpoint}-#{$offsetClass}-#{$i} { margin-left: mq-loop($gutterPerc, $i, $colNb) + 2 * $marginLeft; }
		}
		.#{$breakpoint}-no-#{$offsetClass} { margin-left: $marginLeft; }
	}


	// Some helpers
	@if $visibility {
		.#{$breakpoint}-hidden  { display: none; }
		.#{$breakpoint}-visible { display: initial; }
	}
}




// Display sizes for each breakpoint
// -------------------------------------

// 01. Display general values ; by default 'large' if $mobile-first: false (see mixins/mq.scss)
@include grid-math($colNb, $globalBkpt ,$gutterPerc);

// 02. Display values for each breakpoints
@each $breakpoint, $value in $breakpoints {
	@include mq($value) {
		@include grid-math($colNb,$breakpoint,$gutterPerc);
	}
}




// Debug
// -----------------------------------

@if $debug {
	@debug "\a\aGrid:\a- width: #{map-get($grid, width)}\a- gutter-width: #{map-get($grid, gutter-width)}\a- rowPadding: #{map-get($grid, rowPadding)}\a- colPadding: #{map-get($grid, colPadding)}\a- nb-of-columns: #{map-get($grid, nb-of-columns)}\a\a- $positionScheme: #{$positionScheme}\a- $centered: #{$centered}\a- $small: #{$small}\a- $offset: #{$offset}\a- $visibility: #{$visibility}\a\a- $gutterPerc: #{$gutterPerc}\a- $max-width: #{$max-width}\a- $marginLeft: #{$marginLeft}\a\a- $dev: #{$dev}\a- $debug: #{$debug}\a";
}


