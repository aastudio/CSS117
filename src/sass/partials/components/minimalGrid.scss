//------------------------------------
//  THE GRID						  
//------------------------------------

//!\ Dependencies :
// @import '../mixins/baseline';
// @import '../mixins/mq';
// @import '../utils/helpers'; // if $positionScheme: 'float'



// Variables
// ----------------------------------------

// Are you mobile first ? See mixins/mq.scss and change the variable $mobile-first


// Grid dimensions
$grid: (
	width:			960px,
	gutter-width:	50px,
	nb-of-columns:	12
) !default;


// Floats or Inline-block ?
$positionScheme: 'inline-block'; // 'float'


// Are you in development mode ?
$dev: false !default; // Add a background-color behind elements


// Do you want a unique full width for the 'small' breakpoint (see mq.scss for breakpoints) ?
$small: false !default;


// Do you need offset classes ?
$offset: false !default;


// Do you need hidden/visible classes ?
$visibility: false !default;


// Customize your class name (only if you think it is necessary)
$row: 			'row' 		!default;
$col: 		 	'col' 		!default;
$offsetClass:	'offset' 	!default;







// ====================================================================//
// Do not modify from here
// ====================================================================//


// Core variables
// -----------------------------------

$colNb:			map-get($grid, nb-of-columns);
$gutterPerc: 	strip-units( map-get($grid, gutter-width) ) * 100% / strip-units( map-get($grid, width) );



// Create two classes : .row & .col
// -----------------------------------

// Wrap the grid
.#{$row} {
	margin-left: -$gutterPerc;
	
	@if $positionScheme == 'inline-block' 	{ font-size: 0; }
	@else if $positionScheme == 'float' 	{ @extend %cf; }

	@include baseline(1); // cf. _mixins.scss
}

	.#{$col} {
		@if $positionScheme == 'inline-block' { 
			display: inline-block;
			vertical-align: top; 
			font-size: 1rem; 
		}
		@else if $positionScheme == 'float' { float: left; }
		
		box-sizing: border-box;
		margin-left: $gutterPerc;

		@include baseline(1); // cf. _mixins.scss

		//& > & { margin-bottom: 0; } // TO FIX trouver un exemple pour voir si n√©cessaire

		@if $dev {
			/* for development mode only */
			border-left: 1px rgba(0,0,255,0.8) solid !important;
			/* for development mode only */
			border-right: 1px rgba(0,0,255,0.8) solid !important;
			/* for development mode only */
			background-color: rgba(255,0,0,0.1) !important;
			@at-root body { 
				/* for development mode only */
				background-color: rgba(255,0,0,0.2) !important; 
			}
		}
	}



// Function that will loop $colNb times
// -----------------------------------

// Calculate the width of a column in percentage
@function mq-loop($gutterPerc, $i, $colNb){
	@return ( (($i/$colNb)*100%) - $gutterPerc );
}

// Apply mq-loop to each column size from 1 to $colNb (default: 12)
@mixin grid-math($colNb,$breakpoint,$gutterPerc) {
	
	@if $breakpoint == 'small' and $small {
		.col { width: mq-loop($gutterPerc, $colNb, $colNb); }
	}

	@else {
		@for $i from 1 to ($colNb) { 
			.#{$breakpoint}-#{$i} {
				width: mq-loop($gutterPerc, $i, $colNb);
			}
		}
	
		.#{$breakpoint}-#{$colNb} { width: mq-loop($gutterPerc, $colNb, $colNb); }
	}
	


	// Create offset classes
	@if $offset {
		@for $i from 1 to ($colNb+1) { 
			.#{$offsetClass}-#{$breakpoint}-#{$i} { 
				margin-left: (mq-loop(0, $i, $colNb)) + $gutterPerc; 
			}
		}
	}

	// Some helpers
	@if $visibility {
		.#{$breakpoint}-hidden  { display: none; }
		.#{$breakpoint}-visible { display: initial; }
	}
}




// Display sizes for each breakpoint
// -------------------------------------

// 01. Display general values ; by default 'large' if $mobile-first: false (see mixins/mq.scss)
@include grid-math($colNb, $globalBkpt ,$gutterPerc);

// 02. Display values for each breakpoints
@each $breakpoint, $value in $breakpoints {
	@include mq($value) {
		@include grid-math($colNb,$breakpoint,$gutterPerc);
	}
}